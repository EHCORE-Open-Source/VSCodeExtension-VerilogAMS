{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "scopeName": "source.verilog.analog.basic",
    "patterns": [
        {
            "include": "#basic"
        },
        {
            "include": "#context"
        }
    ],
    "repository": {
        "basic": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "comment": "block comment",
                    "name": "comment.block.va",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "match": "\\b(TODO)\\b",
                            "name": "markup.bold.va"
                        }
                    ]
                },
                {
                    "comment": "line comment",
                    "name": "comment.line.va",
                    "match": "//(.*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "comment": "reinforcement of items to be completed",
                                    "match": "\\b(?:TODO)\\b",
                                    "name": "markup.bold.va.comment.todo"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "comment": "double quotes",
                    "name": "string.quoted.double.va",
                    "begin": "\\\"", 
                    "end": "\\\"",
		            "patterns": [
                        {
                            "comment": "white space characters",
                            "name": "constant.character.escape.va strong.va.escape",
                            "match": "\\\\[nt]"
                        },
                        {
                            "comment": "special characters",
                            "name": "constant.character.escape.va.special",
                            "match": "\\\\[\"\\\\]"
                        },
                        {
                            "comment": "octal characters for ASCII",
                            "name": "constant.character.escape.va.octal",
                            "match": "\\\\(?:[01][0-7]{2}|[0-7]{1,2}(?=[^0-7]))"
                        }
                    ]
                     	
                }
            ]
        },
        "numeric": {
            "patterns": [
                {
                    "comment": "numeric for scientific or symbol notation",
                    "name": "constant.numeric.va",
                    "match": "(?:\\b|[+-])[0-9_]+(?:\\.[0-9_]+)?(?:[eE][+-]?[0-9_]+|[TGMKkmunpfa])?\\b"
                }
            ]
        },
        "context": {
            "patterns": [
                {
                    "include": "#preprocess"
                },
                {
                    "include": "#package"
                }
            ]
        },
        "preprocess": {
            "patterns": [
                {
                    "comment": "compiler directives (define)",
                    "match": "^\\s*(`define)\\s*([[:word:]]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.va"
                        },
                        "2": {
                            "name": "variable.other.constant.va"
                        }
                    }
                },
                {
                    "comment": "compiler directives (others)",
                    "match": "^\\s*(`(?:default\\_(?:discipline|transition)|include|undef))\\b",
                    "name": "keyword.control.va"
                },
                {
                    "include": "#definition"
                }
            ]
        },
        "definition": {
            "patterns": [
                {
                    "match": "`[[:word:]]*\\b",
                    "name": "variable.other.constant.va.definition strong.va.definition"
                }
            ]
        },
        "package": {
            "patterns": [
                {
                    "comment": "(Verilog-AMS LRM version 2.4 [see 2.8]) simple identifier shall be any sequence of letters, digits, dollar signs ($), and the underscore characters (_).",
                    "begin": "\\b(module)\\s*([[:word:]][[:word:]$]*)?\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.va.module"
                        },
                        "2": {
                            "name": "entity.name.function.va.module strong.va.module"
                        }
                    },
                    "end": "\\b(?:endmodule)\\b",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.other.va.module"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#module"
                        }
                    ]
                }
            ]
        },
        "module": {
            "comment": "(Verilog-AMS LRM version 2.4 [see 2.8]) simple identifier shall be any sequence of letters, digits, dollar signs ($), and the underscore characters (_).",
            "patterns": [
                {
                    "comment": "port enumeration",
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#moduleport"
                        }
                    ]
                },
                {
                    "comment": "module context",
                    "begin": ";",
                    "end": "(?=endmodule)",
                    "patterns": [
                        {
                            "include": "#basic"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#property"
                        },
                        {
                            "include": "#discipline"
                        },
                        {
                            "include": "#branch"
                        },
                        {
                            "include": "#parameter"
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#analog_block"
                        }
                    ]
                }
            ]
        },
        "moduleport": {
            "patterns": [
                {
                    "include": "#numeric"
                },
                {
                    "match": "\\b(in[op]ut|output)\\b",
                    "name": "keyword.other.va.port.direction"
                },
                {
                    "match": "\\b[[:word:]][[:word:]$]*\\s*([^,;\\[/]*)?\\b",
                    "name": "variable.va.port strong.va.port",
                    "captures": {
                        "1": {
                            "name": "invalid.module.port"
                        }
                    }
                }
            ]
        },
        "parameter": {
            "patterns": [
                {
                    "comment": "parameter block definition",
                    "begin": "\\b(parameter)\\b\\s*(integer|real|string)?",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.va.parameter"
                        },
                        "2": {
                            "name": "keyword.other.va.parameter"
                        }
                    },
                    "end": ";",
                    "patterns": [
                        {
                            "include": "#basic"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#range"
                        },
                        {
                            "include": "#mathematics"
                        }
                    ]
                }
            ]
        },
        "range": {
            "patterns": [
                {
                    "match": "\\b(?:from|exclude)\\b",
                    "name": "keyword.control.va.parameter.range"
                },
                {
                    "comment": "valid range definition",
                    "begin": "(?<=\\b(?:from|exclude)\\s*)([\\[\\(])",
                    "beginCaptures": {
                        "1": {
                            "name": "strong.va.parameter.range comment.va.parameter.range strong.va.parameter.range"
                        }
                    },
                    "end": "([\\]\\)])",
                    "endCaptures": {
                        "1": {
                            "name": "strong.va.parameter.range comment.va.parameter.range strong.va.parameter.range"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#basic"
                        },
                        {
                            "include": "#infinite"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#mathematics"
                        }
                    ]
                }
            ]
        },
        "infinite": {
            "patterns": [
                {
                    "comment": "infinite number",
                    "name": "keyword.other.va.numeric.infinite variable.other.constant.va.numeric.infinite",
                    "match": "(?:\\b|[+-])(?:inf)\\b"
                }
            ]
        },
        "mathematics": {
            "patterns": [
                {
                    "begin": "\\b(ln|log|exp|sqrt|min|max|abs|pow|floor|ceil|a?(?:sin|cos|tan)h?|atan2|hypot)\\s*\\(",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.va.math"
                        }
                    },
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#numeric"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#interface"
                        },
                        {
                            "include": "#mathematics"
                        }
                    ]
                }
            ]
        },
        "interface": {
            "patterns": [
                {
                    "match": "\\b([IV])\\s*\\(\\s*([[:word:]]*)\\s*(?:\\[[^\\]]*\\])?\\s*(?:,\\s*([[:word:]]*)\\s*(?:\\[[^\\]]*\\])?\\s*)?\\)",
                    "captures": {
                        "1": {
                            "name": "strong.va.port.attribute"
                        },
                        "2": {
                            "name": "variable.va.port"
                        },
                        "3": {
                            "name": "variable.va.port"
                        }
                    }
                }
            ]
        },
        "property": {
            "patterns": [
                {
                    "comment": "port declaration",
                    "begin": "\\b(in[op]ut|output)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.va.port.direction"
                        }
                    },
                    "end": ";",
                    "patterns": [
                        {
                            "include": "#portbus"
                        }
                    ]
                },
                {
                    "comment": "ground declaration",
                    "begin": "\\b(ground)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.va.port.ground"
                        }
                    },
                    "end": ";",
                    "patterns": [
                        {
                            "include": "#portbus"
                        }
                    ]
                }
            ]
        },
        "discipline": {
            "patterns": [
                {
                    "comment": "discipline declaration",
                    "begin": "\\b(current|ddiscrete|electrical|magnetic|kinematic(?:_v)?|rotational(?:_omega)?|thermal|voltage)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "support.type.va.discipline"
                        }
                    },
                    "end": ";",
                    "patterns": [
                        {
                            "include": "#portbus"
                        }
                    ]
                }
            ]
        },
        "portbus": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#numeric"
                },
                {
                    "include": "#definition"
                },
                {
                    "include": "#mathematics"
                },
                {
                    "match": "\\b[[:word:]][[:word:]$]*\\s*([^,;\\[/]*)?\\b",
                    "name": "variable.va.port",
                    "captures": {
                        "1": {
                            "name": "invalid.port"
                        }
                    }
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "comment": "data type declaration",
                    "begin": "\\b(integer|real|string)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.va.datatype"
                        }
                    },
                    "end": ";",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#numeric"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#mathematics"
                        },
                        {
                            "match": "\\b[[:word:]][[:word:]$]*\\s*([^,;\\[/]*)?\\b",
                            "captures": {
                                "1": {
                                    "name": "invalid.variable"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "branch": {
            "patterns": [
                {
                    "comment": "branch declaration",
                    "begin": "\\b(branch)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.va.branch"
                        }
                    },
                    "end": ";",
                    "patterns": [
                        {
                            "include": "#branch_definition"
                        },
                        {
                            "match": "\\b[[:word:]][[:word:]$]*\\s*([^,;\\[/]*)?\\b",
                            "name": "variable.va.branch",
                            "captures": {
                                "1": {
                                    "name": "invalid.variable"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "branch_definition": {
            "patterns": [
                {
                    "begin": "\\(<",
                    "end": ">\\)",
                    "patterns": [
                        {
                            "include": "#branch_defname"
                        }
                    ]
                },
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#branch_defname"   
                        }
                    ]
                }
            ]
        },
        "branch_defname": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#numeric"
                },
                {
                    "include": "#definition"
                },
                {
                    "include": "#mathematics"
                },
                {
                    "match": "\\b[[:word:]][[:word:]$]*\\s*([^,;\\[\\)>/]*)?\\b",
                    "name": "variable.va.port",
                    "captures": {
                        "1": {
                            "name": "invalid.branch"
                        }
                    }
                }
            ]
        },
        "string_input_specification": {
            "patterns": [
                {
                    "comment": "double quotes",
                    "name": "string.quoted.double.va",
                    "begin": "\\\"", 
                    "end": "\\\"",
		            "patterns": [
                        {
                            "include": "$string"
                        },
                        {
                            "comment": "common input format specifications",
                            "name": "support.variable.va.input.specification",
                            "match": "\\%[[:digit:]]*(?i)[dobcsmfegr]"
                        }
                    ]
                     	
                }
            ]
        },
        "string_output_specification": {
            "patterns": [
                {
                    "comment": "double quotes",
                    "name": "string.quoted.double.va",
                    "begin": "\\\"", 
                    "end": "\\\"",
		            "patterns": [
                        {
                            "include": "$string"
                        },
                        {
                            "comment": "common output format specifications",
                            "name": "support.variable.va.output.specification",
                            "match": "\\%(?:(?i)[clm]|[[:digit:]]*[hdobs]|(?:-?[[:digit:]]*\\.[[:digit:]]+)?[fegr])"
                        }
                    ]
                }
            ]
        },
        "analog_block": {
            "patterns": [
                {
                    "match": "\\b(?:analog)\\b",
                    "name": "keyword.other.va.block strong.va.block"
                },
                {
                    "comment": "analog block",
                    "begin": "(?<=\\b(?:analog)\\s+)(?:begin)\\b",
                    "end": "\\b(?:end)\\b",
                    "patterns": [
                        {
                            "include": "#trigger"
                        },
                        {
                            "include": "#normal"
                        }
                    ]
                }
            ]
        },
        "normal": {
            "patterns": [
                {
                    "include": "#basic"
                },
                {
                    "include": "#definition"
                },
                {
                    "include": "#infinite"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#interface"
                },
                {
                    "include": "#function"
                },
                {
                    "include": "#system"
                },
                {
                    "include": "#equation"
                }
            ]
        },
        "equation": {
            "patterns": [
                {
                    "match": "(?<=[[:word:]$\\s])(?:=|<\\+)(?=\\s)",
                    "name": "punctuation.definition.tag.logic"
                }
            ]
        },
        "trigger": {
            "patterns": [
                {
                    "begin": "(@)\\(",
                    "beginCaptures": {
                        "1": {
                            "name": "support.type.va.event strong.va.event"
                        }
                    },
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#event"
                        },
                        {
                            "include": "#eventlogic"
                        }
                    ]
                }
            ]
        },
        "event": {
            "patterns": [
                {
                    "comment": "analog event function",
                    "match": "\\b(?:above|cross|timer|(?:final|initial)_step)\\b",
                    "name": "entity.name.function.event"
                },
                {
                    "comment": "analog event parameter",
                    "begin": "(?<=\\b(?:above|cross|timer|(?:final|initial)_step)\\s*)\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#normal"
                        }
                    ]
                }
            ]
        },
        "eventlogic": {
            "patterns": [
                {
                    "match": "\\b(?:and|or)\\b",
                    "name": "punctuation.definition.tag.event.logic"
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "begin": "(?<=\\b(?:if))\\s*\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#normal"
                        },
                        {
                            "include": "#conditional_logic"
                        }
                    ]
                },
                {
                    "begin": "(?<=(?:\\$sformat))\\s*\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#string_output_specification"
                        },
                        {
                            "include": "#numeric"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#infinite"
                        },
                        {
                            "include": "#keyword"
                        },
                        {
                            "include": "#interface"
                        },
                        {
                            "include": "#function"
                        },
                        {
                            "include": "#system"
                        },
                        {
                            "include": "#equation"
                        }
                    ]
                },
                {
                    "begin": "(?<=(?:\\$[fs]scanf))\\s*\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#string_input_specification"
                        },
                        {
                            "include": "#numeric"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#infinite"
                        },
                        {
                            "include": "#keyword"
                        },
                        {
                            "include": "#interface"
                        },
                        {
                            "include": "#function"
                        },
                        {
                            "include": "#system"
                        },
                        {
                            "include": "#equation"
                        }
                    ]
                },
                {
                    "begin": "\\b(begin)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.va"
                        }
                    },
                    "end": "\\b(end)\\b",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.control.va"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#normal"
                        }
                    ]
                },
                {
                    "comment": "if-else",
                    "name": "keyword.control.va",
                    "match": "\\b(if|else|for)\\b"
                },
                {
                    "comment": "case",
                    "name": "keyword.control.va",
                    "match": "\\b(case[xz]?|endcase)\\b"
                },
                {
                    "comment": "loop",
                    "name": "keyword.control.va",
                    "match": "\\b(for|repeat)\\b"
                }
            ]
        },
        "conditional_logic": {
            "patterns": [
                {
                    "match": "[\\+\\-<>=!~&^|]+",
                    "name": "invalid",
                    "captures": {
                        "0": {
                            "patterns": [
                                {
                                    "match": "(?<=[[:word:]$\\s])(?:[<>!=]=|\\+{1,2}|\\-{1,2}|[<>|&!~])$",
                                    "name": "keyword.operator.va.conditional.logic"
                                },
                                {
                                    "match": "(?<=[[:word:]$\\s])(?:\\|\\||&&)$",
                                    "name": "punctuation.definition.tag.logic"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "function": {
            "patterns": [
                {
                    "begin": "\\b([[:word:]]*)\\s*\\(",
                    "beginCaptures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#function_name"
                                }
                            ]
                        }
                    },
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#numeric"
                        },
                        {
                            "include": "#definition"
                        },
                        {
                            "include": "#function"
                        }
                    ]
                }
            ]
        },
        "function_name": {
            "patterns": [
                {
                    "comment": "analog built in functions",
                    "match": "\\b(ln|log|exp|sqrt|min|max|abs|pow|floor|ceil|a?(?:sin|cos|tan)h?|atan2|hypot)\\b",
                    "name": "entity.name.function.va"
                },
                {
                    "comment": "analysis function",
                    "match": "\\b(?:analysis)\\b",
                    "name": "entity.name.function.va"
                },
                {
                    "comment": "analog filter functions",
                    "match": "\\b(?:dd[tx]|idt(?:mod)?|absdelay|transition|slew|last_crossing|limexp)\\b",
                    "name": "entity.name.function.va"
                },
                {
                    "comment": "analog small signal functions",
                    "match": "\\b(?:ac_stim|(?:flicker|white)_noise|noise_table(?:_log)?)\\b",
                    "name": "entity.name.function.va"
                },
                {
                    "comment": "laplace or zi filter functions",
                    "match": "\\b(?:(?:laplace|zi)_[nz][pd])\\b",
                    "name": "entity.name.function.va"
                },
                {
                    "comment": "nature access functions",
                    "match": "\\b(?:potential|flow)\\b",
                    "name": "entity.name.function.va"
                }
            ]
        },
        "system": {
            "patterns": [
                {
                    "comment": "built-in functions",
                    "match": "\\$(abstime|a?random|bound\\_step|discontinuity|display|driver\\_(count|delay|(next\\_)?(state|strength)|type)|error|fatal|finish|info|limit|root|stop|temperature|warning|write)\\b",
                    "name": "support.class.verilog",
                    "captures": {
                        "0": {
                            "name": "support.class.verilog strong.va"
                        }
                    }
                },
                {
                    "comment": "flushing output",
                    "match": "\\$(fflush)\\b",
                    "name": "support.class.verilog",
                    "captures": {
                        "0": {
                            "name": "strong.va"
                        }
                    }
                },
                {
                    "comment": "formatting data from/to a string",
                    "match": "\\$(s(format|scanf|write))\\b",
                    "name": "support.class.verilog",
                    "captures": {
                        "0": {
                            "name": "strong.va"
                        }
                    }
                },
                {
                    "comment": "file system",
                    "match": "\\$(f(open|close|gets))\\b",
                    "name": "support.class.verilog",
                    "captures": {
                        "0": {
                            "name": "strong.va"
                        }
                    }
                },
                {
                    "comment": "unknown system function",
                    "match": "(?<=[^[:word:]$])\\$[[:word:]$]*\\b",
                    "name": "invalid.illegal.system.function"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "comment": "unary_operator ::= + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~",
                    "name": "keyword.operator.va.operator.unary strong.va.operator.unary"
                },
                {
                    "comment": "binary_operator ::= + | - | * | / | % | == | != | === | !== | && | || | ** | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<",
                    "name": "keyword.operator.va.operator.binary strong.va.operator.binary"
                },
                {
                    "comment": "unary_module_path_operator ::= ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~",
                    "name": "keyword.operator.va.operator.unary_module strong.va.operator.unary_module"
                },
                {
                    "comment": "binary_module_path_operator ::= == | != | && | || | & | | | ^ | ^~ | ~^",
                    "name": "keyword.operator.va.operator.binary_module strong.va.operator.binary_module"
                }
            ]
        }
    }
}