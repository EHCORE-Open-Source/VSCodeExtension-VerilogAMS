{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "verilog-ams",
    "injections": {
        "R:source.vams": {
            "comment": "Uses R: to ensure this matches after any other injections.",
            "patterns": [
                {
                    "comment": "invalid commands",
                    "match": "^[.].*",
                    "name": "invalid.illegal.vams"
                }
            ]
        }
    },
    "patterns": [
        {
            "include": "#strings"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#numeric"
        },
        {
            "include": "#module_pattern"
        },
        {
            "include": "#keywords"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
            {
                "name": "keyword.control.vams",
                "match": "\\b(module|access|acos|acosh|ac_stim|aliasparam|always|analog|analysis|and|asin|asinh|assert|assign|atan|atan2|atanh|automatic|begin|branch|buf|bufif0|bufif1|case|casex|casez|ceil|cell|cmos|config|connect|connectmodule|connectrules|continuous|cos|cosh|cross|ddt|ddt_nature|ddx|deassign|default|defparam|design|disable|discipline|discrete|domain|driver_update|edge|else|end|endcase|endconfig|endconnectrules|enddiscipline|endfunction|endgenerate|endmodule|endnature|endparamset|endprimitive|endspecify|endtable|endtask|event|exclude|exp|final_step|flicker_noise|floor|flow|for|force|forever|fork|from|function|generate|genvar|ground|highz0|highz1|hypot|idt|idtmod|idt_nature|if|ifnone|incdir|include|inf|initial|initial_step|inout|input|instance|integer|join|laplace_nd|laplace_np|laplace_zd|laplace_zp|large|last_crossing|liblist|library|limexp|ln|localparam|log|macromodule|max|medium|merged|min|nand|nature|negedge|net_resolution|nmos|noise_table|noise_table_log|nor|noshowcancelled|not|notif0|notif1|or|output|parameter|paramset|pmos|posedge|potential|pow|primitive|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|rcmos|real|realtime|reg|release|repeat|resolveto|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sin|sinh|showcancelled|signed|slew|small|specify|specparam|split|sqrt|string|strong0|strong1|supply0|supply1|table|tan|tanh|task|time|timer|tran|tranif0|tranif1|transition|tri|tri0|tri1|triand|trior|trireg|units|unsigned|use|uwire|vectored|wait|wand|weak0|weak1|while|white_noise|wire|wor|wreal|xnor|xor|zi_nd|zi_np|zi_zd|zi_zp)\\b"
            }
        ]
        },
        "comment": {
            "patterns": [
            {
                "comment": "comment for /* */",
                "begin": "/\\*",
                "end": "\\*/",
                "name": "comment.block.vams"
            },
            {
                "comment": "comment for //",
                "name": "comment.line.vams",
                "match": "[//].*$"
            }
            
        ]
        },
        "numeric": {
            "patterns": [
            {
                "comment": "numeric for scientific notation",
                "name": "constant.numeric.vams",
                "match": "([+-]?[0-9_]+[.]?[0-9_]*[eE][+-]?[0-9_]+($|\\s+))"
            },
            {
                "comment": "numeric for floating-point number",
                "name": "constant.numeric.vams",
                "match": "([+-]?[0-9_]+[.]?[0-9_]*[TGMKkmunpfa]?($|\\s+))"
            }
        ]
        },
        "strings": {
            "patterns": [
                {
                    "comment": "Double quotes",
                    "begin": "\\\"", 
                    "end": "\\\"",
                    "name": "string.quoted.double.va",
		            "patterns": [
                        {
                        "name": "constant.character.escape.va",
                        "match": "\\\\([nt\\x5C\\x22]|[0-1]?[0-7]?[0-7])"
                        }
                    ]
                     	
                }
            ]
        },
        "module_pattern": {
            "patterns": [
                {
                    "begin": "\\b(module)\\s+([a-zA-Z][a-zA-Z0-9_]*)",
                    "beginCaptures": {
                        "1": {
                        "name": "keyword.control.vams"
                        },
                        "2": {
                        "name": "storage.type.module.vams"
                        }
                    },
                    "end": "\\bendmodule\\b",
                    "endCaptures": {
                        "0": {
                        "name": "keyword.control.vams"
                        }
                    },
                    "name": "meta.block.module.vams",
                    "patterns": [
                        {
                        "include": "#keywords"
                        }
                    ]
                }
            ]
        }
        
    },
    "scopeName": "source.vams"
}